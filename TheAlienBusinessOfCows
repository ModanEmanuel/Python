# Problem :

# On 23rd of March 1983, President Ronald Reagan of the USA announced the Strategic Defense Initiative (SDI),
# nicknamed by the medias as the Star Wars program.
# Although most people thought that it was a missile defense system to protect the USA from USSR attacks by ballistic nuclear weapons,
# the Department of Defense organized it as the military answer to alien operations on North America.
# Since the beginning of 1984, the Homing Overlay Experiment (HOE)
# provides hit-to-kill missiles going up to 6km/s to search and destroy any object until an altitude of 160 km.
# Those Minuteman missiles are launched from the Space Launch Complexe 1 of the Vandenberg Space Force Base,
# Santa Barbara County, California (34°45'21.8"N, 120°37'34.8"W, elevation: 46 meters).

# You are an alien mercenary working for the Corporation of Abduction and Transfer of Typical Livestock from Earth (C.A.T.T.L.E.),
# the biggest industry of its kind in the Milky Way.
# This corporation has a hidden base on one of Jupiter's moons, from where different types of collectors are sent to Earth.
# Your corporation takes a very dim view of the new earth defense system,
# which has already caused the company's stock to fall in value on the Universe stock exchange.
# The CEO, Elon Mowsk, has tasked you with defining the feasibility of upcoming missions.

# C.A.T.T.L.E. collectors take off vertically at a speed of collector speed to escape Earth's gravity,
# and this speed is kept until the moon orbit altitude (385 000km). A collector aims at its target point,
# stops at 500 meters above the ground, out of effective range of assault rifles.
# It then abducts as many cows as possible until collector maximum capacity, and takes off.
# To not kill the cow during the abduction, they are captured one by one at a speed of 9.81m/s .
# This collecting speed is multiplied by the collector levitation efficiency parameter.
# However, once the abducting device is on,
# a special SDI radar detects it and a MinuteMan missile is immediately launched at maximum speed from the Space Launch Complexe 1
# of the Vandenberg Space Force Base.
# It goes in a straight line from the silo to its limit altitude above the anomaly pointed by the HOE radar,
# then fall vertically. If it collides with a C.A.T.T.L.E. collector, both explode, Elon Mowsk is furious, the collector crew is dead,
# and you are held responsible for the deaths.

#As you don't want to go to intergalactic jail, you must tell if a mission is possible or not,
# given the name of the destination, its latitude, longitude, and elevation.
# A mission is possible if one collector abduct cows and flee without getting hit by a MinuteMan missile.
# if the mission is possible, you have to give the collector type to send and the number of cows it will bring back.
# Beware, sending a collector has a cost that must be covered by the number of cows brought back.

# The VaCoWM Cleaner is the formula 1 of the collectors. Designed to be fast, it can get to 44.7 km/s in Earth atmosphere.
# However, the lack of space limits the capacity to 3 cows only, and its smaller abduction beams has a levitation efficiency of 0.8.
# It is the cheapest collector, and make profitable missions if it brings back at least one cow.
# The L4nd MoWer is the medium collector. It was designed to have a good balance between speed (22.38 km/s and capacity (10 cows),
# with a good quality abduction device (efficiency of 1.2). 4th generation of its kind, it must bring back at least 6 cows to be profitable.
# The Cow Harvester is the biggest of its kind, just fast enough to escape Earth's gravity (11.19 km/s).
# Its "slowness" is compensated by its capacity (20 cows !) and its premium abduction device which can levitate cows with
# an impressive 1.5 efficiency. King of collectors, it is not cheap to send it, and must bring at least 14 cows for a mission to be worth it.

# Example
# If a L4nd Mower can get 8 cows and a VaCoWM 3 cows, send the first one (more cows !).
# But if a L4nd Mower can get 5 cows and a VaCoWM 3 cows, send the last one, because sending the first one is not profitable.

# Cow farms :

# Boadwine Farms Inc (South Dakota, USA) 43°44'41.7"N 96°49'37.4"W 496
# George Farms (Wyoming, USA) 44°38'39.1"N 108°58'19.0"W 1467
# Coronado Dairy (Arizona, USA) 32°01'35.6"N 109°45'44.3"W 1289
# # Peaceful Hills Farm (Missouri, USA) 39°04'39.6"N 94°11'49.5"W 282
# # Grotegut Dairy Farm Inc (Wisconsin, USA) 43°59'33.9"N 87°45'19.2"W 227
# Crooked Creek Farm Dairy (Michigan, USA) 42°51'18.8"N 82°59'26.4"W 237
# MVP Dairy, LLC (Ohio, USA) 40°37'28.0"N 84°31'41.0"W 253
# The Family Cow (Pennsylvania, USA) 39°58'02.7"N 77°34'26.9"W 213
# Kleinpeter Farms Dairy LLC (Louisiana, USA) 30°21'47.1"N 91°01'21.1"W 8
# Working Cows Dairy (Alabama, USA) 31°11'14.2"N 85°36'06.3"W 83
# Happy Cow Creamery (South Carolina, USA) 34°36'51.1"N 82°21'13.1"W 249

import math

# Defining all constants
eart_radius = 6371 # in km
dist_to_moon = 385000 # in km
# Those Minuteman missiles are launched from the Space Launch Complexe 1 of the Vandenberg Space Force Base,
# Santa Barbara County, California (34°45'21.8"N, 120°37'34.8"W, elevation: 46 meters)

class Locations:
    def __init__(self, name, latitude, longitude, elevation):
        self.name = name
        self.latitude = latitude
        self.longitude = longitude
        self.elevation = elevation

class Rocket_Location(Locations):
    def __init__(self, name, latitude, longitude, elevation, speed):
        super().__init__(name, latitude, longitude, elevation)
        self.speed = speed

def parse_coordinates(lat_str, lon_str, elevation_str):
    """
    Parses latitude, longitude and elevation strings into decimal degrees and elevation into km

    :param lat_str: Latitude in degrees, minutes, and seconds
    :param lon_str: Longitude in degrees, minutes, and seconds
    :param elevation_str: Elevation in meters
    :return: Dictionary with 'latitude', 'longitude', and 'elevation' in decimal degrees and km
    """
    def dms_to_decimal(degrees, minutes, seconds, direction):
        decimal = degrees + minutes/60 + seconds/3600
        if direction in ['S', 'W']:
            decimal = -decimal
        return decimal

    def clean_dms(dms_str):
        dms_str = dms_str.replace('°', ' ').replace("'", ' ').replace('/', '').strip()
        # e.g. : 34°45'21.8/N, 120°37'34.8/W the special characters for degrees, minutes and seconds
        # are being replaced as follows :
        # ° is replaced with " " (space) --> 34 45'21.8"N and 120 37'34.8/W
        # ' is being replaced with " " (space) --> 34 45 21.8"N and 120 37 34.8/W
        # / is being replaced with "" (nothing) --> 34 45 21.8N and 120 37 34.8W
        parts = dms_str.split()
        # It splits the cleaned string into a list of parts based on spaces
        # 34 45 21.8N and 120 37 34.8W becomes ["34", "45", "21.8N"] and ["120", "37", "34.8W"]
        degrees = int(parts[0])
        # degrees takes the converted into integer value of the index 0 from the "parts" list
        minutes = int(parts[1])
        # minutes takes the converted into integer value of the index 1 from the "parts" list
        seconds = float(parts[2][:-1])
        # parts[2][:-1] --> Slices the string to exclude the last character (the direction).
        # float(parts[2][:-1]) --> Converts the remaining string to a floating-point number

        direction = parts[2][-1]
        # Direction is the last character of seconds
        # Extracts the last character of the third element, which represents the cardinal direction.
        return degrees, minutes, seconds, direction

    # Parse Latitude
    lat_degrees, lat_minutes, lat_seconds, lat_direction = clean_dms(lat_str)
    latitude = dms_to_decimal(lat_degrees, lat_minutes, lat_seconds, lat_direction)

    # Parse Longitude
    lon_degrees, lon_minutes, lon_seconds, lon_direction = clean_dms(lon_str)
    longitude = dms_to_decimal(lon_degrees, lon_minutes, lon_seconds, lon_direction)

    # Parse elevation
    elevation = float(elevation_str.split()[0]) / 1000 # Converting meters into kilometers

    return latitude, longitude, elevation

class Cattle:
    def __init__(self, speed, max_capacity, min_cows, lev_efficiency, name):
        self.speed = speed
        self.max_capacity = max_capacity
        self.min_cows = min_cows
        self.lev_efficiency = lev_efficiency
        self.name = name

rocket = Rocket_Location(name="Vandenberg Space Force Base", latitude="34°45'21.8/N", longitude="120°37'34.8/W", elevation=160, speed=6)

farm1 = Locations(name="Boadwine Farms Inc", latitude="43°44'41.7/N", longitude= "96°49'37.4/W", elevation=496)
farm2 = Locations(name="George Farms", latitude="44°38'39.1/N", longitude= "108°58'19.0/W", elevation=1467)
farm3 = Locations(name="Coronado Dairy", latitude="32°01'35.6/N", longitude= "109°45'44.3/W", elevation=1289)
farm4 = Locations(name="Peaceful Hills Farm", latitude="39°04'39.6/N", longitude= "94°11'49.5/W", elevation=282)
farm5 = Locations(name="Grotegut Dairy Farm Inc", latitude="43°59'33.9/N", longitude= "87°45'19.2/W", elevation=227)
farm6 = Locations(name="Crooked Creek Farm Dairy", latitude="42°51'18.8/N", longitude= "82°59'26.4/W", elevation=237)
farm7 = Locations(name="MVP Dairy, LLC", latitude="40°37'28.0/N", longitude= "84°31'41.0/W", elevation=253)
farm8 = Locations(name="The Family Cow", latitude="39°58'02.7/N", longitude= "77°34'26.9/W", elevation=213)
farm9 = Locations(name="Kleinpeter Farms Dairy LLC", latitude="30°21'47.1/N", longitude= "91°01'21.1/W", elevation=8)
farm10 = Locations(name="Working Cows Dairy", latitude="31°11'14.2/N", longitude= "85°36'06.3/W", elevation=83)
farm11 = Locations(name="Happy Cow Creamery", latitude="34°36'51.1/N", longitude= "82°21'13.1/W", elevation=249)

collector1 = Cattle(speed=44.7, max_capacity=3,min_cows=1, lev_efficiency=0.8, name="VaCoWM Cleaner")
collector2 = Cattle(speed=22.38, max_capacity=10, min_cows=6, lev_efficiency=1.2, name="L4nd MoWer")
collector3 = Cattle(speed=11.19, max_capacity=20, min_cows=14, lev_efficiency=1.5, name="Cow Harvester")
